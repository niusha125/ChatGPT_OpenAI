const INTERCEPT_SYMBOL = Symbol('intercept');
const RESPONSE_SYMBOL = Symbol('response');
export default function intercept(promise, interceptFn) {
  const p = promise;
  let intercept = p[INTERCEPT_SYMBOL];

  if (intercept) {
    p[RESPONSE_SYMBOL] = null;
    intercept.push(interceptFn);
    return promise;
  }

  p[INTERCEPT_SYMBOL] = intercept = [interceptFn];
  const _then = promise.then;

  const run = () => {
    const res = p[RESPONSE_SYMBOL];
    return res || (p[RESPONSE_SYMBOL] = intercept.reduce((acc, fn) => fn(acc), Promise.resolve(_then.call(promise, x => x))));
  };

  promise.then = (...args) => run().then(...args);

  promise.catch = (...args) => run().catch(...args);

  if (promise.hasOwnProperty('finally')) {
    promise.finally = (...args) => run().finally(...args);
  }

  return promise;
}