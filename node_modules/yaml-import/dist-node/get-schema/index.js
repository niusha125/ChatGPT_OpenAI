"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getSchema;

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _read = _interopRequireDefault(require("../read"));

var _fetch = _interopRequireDefault(require("./fetch"));

var _merge = _interopRequireDefault(require("./merge"));

var _createTree = _interopRequireDefault(require("./create-tree"));

var _validatePayload = _interopRequireDefault(require("./validate-payload"));

var _absolute = _interopRequireDefault(require("./absolute"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getSchema(cwd, options, schemas = [_jsYaml.default.DEFAULT_SAFE_SCHEMA]) {
  const opts = Object.assign({
    ext: ['.yml', '.yaml']
  }, options);
  const types = [new _jsYaml.default.Type('tag:yaml.org,2002:import/single', {
    kind: 'scalar',

    resolve(file) {
      return typeof file === 'string';
    },

    construct(file) {
      return (0, _read.default)((0, _absolute.default)({
        file,
        cwd
      }), opts, schemas);
    }

  }), new _jsYaml.default.Type('tag:yaml.org,2002:import/sequence', {
    kind: 'sequence',

    resolve(files) {
      return Array.isArray(files) && files.length > 0;
    },

    construct(files) {
      const payload = {
        paths: files,
        strategy: 'sequence'
      };
      return (0, _merge.default)((0, _fetch.default)(payload, cwd, opts, schemas), payload.strategy);
    }

  }), new _jsYaml.default.Type('tag:yaml.org,2002:import/shallow', {
    kind: 'sequence',

    resolve(files) {
      return Array.isArray(files) && files.length > 0;
    },

    construct(files) {
      const payload = {
        paths: files,
        strategy: 'shallow'
      };
      return (0, _merge.default)((0, _fetch.default)(payload, cwd, opts, schemas), payload.strategy);
    }

  }), new _jsYaml.default.Type('tag:yaml.org,2002:import/merge', {
    kind: 'sequence',

    resolve(files) {
      return Array.isArray(files) && files.length > 0;
    },

    construct(files) {
      const payload = {
        paths: files,
        strategy: 'merge'
      };
      return (0, _merge.default)((0, _fetch.default)(payload, cwd, opts, schemas), payload.strategy);
    }

  }), new _jsYaml.default.Type('tag:yaml.org,2002:import/deep', {
    kind: 'sequence',

    resolve(files) {
      return Array.isArray(files) && files.length > 0;
    },

    construct(files) {
      const payload = {
        paths: files,
        strategy: 'deep'
      };
      return (0, _merge.default)((0, _fetch.default)(payload, cwd, opts, schemas), payload.strategy);
    }

  }), new _jsYaml.default.Type('tag:yaml.org,2002:import/payload', {
    kind: 'mapping',

    resolve(payload) {
      return (0, _validatePayload.default)(payload);
    },

    construct(payload) {
      return (0, _merge.default)((0, _fetch.default)(payload, cwd, opts, schemas), payload.strategy);
    }

  }), new _jsYaml.default.Type('tag:yaml.org,2002:import/tree', {
    kind: 'mapping',

    resolve(payload) {
      return (0, _validatePayload.default)(payload);
    },

    construct(payload) {
      const paths = Array.isArray(payload.paths) ? payload.paths : [payload.paths];
      const data = paths.map(path => (0, _createTree.default)(path, cwd, opts, schemas, payload.recursive)).concat(payload.data || []);
      return (0, _merge.default)(data, payload.strategy);
    }

  })];

  const schema = _jsYaml.default.Schema.create(schemas, types);

  return schema;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,