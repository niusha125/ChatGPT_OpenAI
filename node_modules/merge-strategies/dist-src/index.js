import mergewith from 'lodash.mergewith';
import clonedeep from 'lodash.clonedeep';

/**
 * If both `defaults` and `value` are objects, they will be shallow merged. Mutations to the returned object won't have an effect over `defaults`.
 */
export function shallow(defaults, value) {
  var data = typeof value === 'object' && value !== null && !Array.isArray(value) && typeof defaults === 'object' && defaults !== null && !Array.isArray(defaults) ? Object.assign(clonedeep(defaults), value) : value;
  return data;
}
/**
 * If both `defaults` and `value` are objects, they will be deep merged. Arrays won't be merged. Mutations to the returned object won't have an effect over `defaults`.
 */

export function merge(defaults, value) {
  var {
    data
  } = mergewith({}, {
    data: defaults
  }, {
    data: value
  }, (obj, src) => Array.isArray(src) || Array.isArray(obj) ? src : undefined);
  return data;
}
/**
 * If both the `defaults` and `value` are objects, they will be deep merged. Arrays will be concatenated. Mutations to the returned object won't have an effect over `defaults`.
 */

export function deep(defaults, value) {
  var {
    data
  } = mergewith({}, {
    data: defaults
  }, {
    data: value
  }, (obj, src) => {
    var a = Array.isArray(obj);
    var b = Array.isArray(src);
    if (!a && !b) return;
    return a && b ? obj.concat(src) : src;
  });
  return data;
}