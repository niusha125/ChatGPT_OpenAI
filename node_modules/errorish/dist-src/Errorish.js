function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export default class Errorish extends Error {
  /**
   * An optional `source` -should reference the object that originated the `Errorish`.
   */

  /**
   * An optional `data` field.
   */
  constructor(message, source, data) {
    super(message || undefined);

    _defineProperty(this, "source", void 0);

    _defineProperty(this, "data", void 0);

    this.source = source;
    this.data = data || {};
  }
  /**
   * Custom Error name: 'Errorish'
   */


  get name() {
    return 'Errorish';
  }
  /**
   * References `source.root` is an instance of `Errorish`; references `source` if it is an instance of `Error`; otherwise it references itself.
   */


  get root() {
    if (this.source instanceof Errorish) return this.source.root;
    return this.source instanceof Error ? this.source : this;
  }
  /**
   * Sets the `data` field and returns itself.
   */


  set(data) {
    this.data = data;
    return this;
  }
  /**
   * Assigns `data` to the `data` field and returns itself.
   */


  assign(data) {
    Object.assign(this.data, data);
    return this;
  }

}