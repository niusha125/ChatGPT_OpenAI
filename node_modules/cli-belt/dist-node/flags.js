"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flags;

var _execall = _interopRequireDefault(require("execall"));

var _camelcase = _interopRequireDefault(require("camelcase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parses a `help` string and returns an object with options, aliases, arugments, and descriptions.
 */
function flags(help, options) {
  const opts = Object.assign({
    safe: true,
    mode: 'keep'
  }, options);

  if (opts.safe) {
    if (/\s*--([a-z-]*)\s*(<[a-z-\s]*>)?,\s*-([a-z-]*)/i.exec(help)) {
      throw Error(`Alias found last in help -should be first`);
    }
  }

  const aliases = {};
  const flags = {};
  const regex = /[\n\r]\s*(?:(-[a-z-]+)[ \t]*,[ \t]*)?(--[a-z-]+)(\s*<.*>)?( +.*)?$/gim;
  const matches = (0, _execall.default)(regex, help);

  for (let match of matches) {
    const sub = match.subMatches;
    if (!sub[1]) continue; // Key

    const key = // prettier-ignore
    opts.mode === 'no-dash' ? sub[1].slice(2) : opts.mode === 'camelcase' ? (0, _camelcase.default)(sub[1]) : sub[1];

    if (opts.safe && flags.hasOwnProperty(key)) {
      throw Error(`Flag ${key} found twice`);
    } // description


    const item = {
      description: sub[3] ? sub[3].trim() : ''
    }; // alias

    if (sub[0]) {
      if (opts.safe && sub[0].length > 2) {
        throw Error(`Aliases must be a single character`);
      }

      item.alias = opts.mode === 'no-dash' || opts.mode === 'camelcase' ? sub[0].slice(1) : sub[0];

      if (opts.safe && aliases.hasOwnProperty(item.alias)) {
        throw Error(`Alias ${item.alias} found twice`);
      }

      aliases[item.alias] = key;
    } // argument


    if (sub[2]) {
      item.argument = sub[2].trim().slice(1, -1);
    }

    flags[key] = item;
  }

  return {
    options: flags,
    aliases
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mbGFncy50cyJdLCJuYW1lcyI6WyJmbGFncyIsImhlbHAiLCJvcHRpb25zIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsInNhZmUiLCJtb2RlIiwiZXhlYyIsIkVycm9yIiwiYWxpYXNlcyIsInJlZ2V4IiwibWF0Y2hlcyIsIm1hdGNoIiwic3ViIiwic3ViTWF0Y2hlcyIsImtleSIsInNsaWNlIiwiaGFzT3duUHJvcGVydHkiLCJpdGVtIiwiZGVzY3JpcHRpb24iLCJ0cmltIiwibGVuZ3RoIiwiYWxpYXMiLCJhcmd1bWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBY0E7OztBQUdlLFNBQVNBLEtBQVQsQ0FDYkMsSUFEYSxFQUViQyxPQUZhLEVBRzBDO0FBQ3ZELFFBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFBRUMsSUFBQUEsSUFBSSxFQUFFLElBQVI7QUFBY0MsSUFBQUEsSUFBSSxFQUFFO0FBQXBCLEdBQWQsRUFBNENMLE9BQTVDLENBQWI7O0FBRUEsTUFBSUMsSUFBSSxDQUFDRyxJQUFULEVBQWU7QUFDYixRQUFJLGlEQUFpREUsSUFBakQsQ0FBc0RQLElBQXRELENBQUosRUFBaUU7QUFDL0QsWUFBTVEsS0FBSyxDQUFFLDJDQUFGLENBQVg7QUFDRDtBQUNGOztBQUVELFFBQU1DLE9BQXdCLEdBQUcsRUFBakM7QUFDQSxRQUFNVixLQUFxQixHQUFHLEVBQTlCO0FBRUEsUUFBTVcsS0FBSyxHQUFHLHVFQUFkO0FBQ0EsUUFBTUMsT0FBTyxHQUFHLHNCQUFRRCxLQUFSLEVBQWVWLElBQWYsQ0FBaEI7O0FBQ0EsT0FBSyxJQUFJWSxLQUFULElBQWtCRCxPQUFsQixFQUEyQjtBQUN6QixVQUFNRSxHQUFHLEdBQUdELEtBQUssQ0FBQ0UsVUFBbEI7QUFFQSxRQUFJLENBQUNELEdBQUcsQ0FBQyxDQUFELENBQVIsRUFBYSxTQUhZLENBS3pCOztBQUNBLFVBQU1FLEdBQUcsR0FDUDtBQUNBYixJQUFBQSxJQUFJLENBQUNJLElBQUwsS0FBYyxTQUFkLEdBQTBCTyxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9HLEtBQVAsQ0FBYSxDQUFiLENBQTFCLEdBQ0lkLElBQUksQ0FBQ0ksSUFBTCxLQUFjLFdBQWQsR0FBNEIsd0JBQVVPLEdBQUcsQ0FBQyxDQUFELENBQWIsQ0FBNUIsR0FBZ0RBLEdBQUcsQ0FBQyxDQUFELENBSHpEOztBQUlBLFFBQUlYLElBQUksQ0FBQ0csSUFBTCxJQUFhTixLQUFLLENBQUNrQixjQUFOLENBQXFCRixHQUFyQixDQUFqQixFQUE0QztBQUMxQyxZQUFNUCxLQUFLLENBQUUsUUFBT08sR0FBSSxjQUFiLENBQVg7QUFDRCxLQVp3QixDQWN6Qjs7O0FBQ0EsVUFBTUcsSUFBVyxHQUFHO0FBQ2xCQyxNQUFBQSxXQUFXLEVBQUVOLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0EsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPTyxJQUFQLEVBQVQsR0FBeUI7QUFEcEIsS0FBcEIsQ0FmeUIsQ0FtQnpCOztBQUNBLFFBQUlQLEdBQUcsQ0FBQyxDQUFELENBQVAsRUFBWTtBQUNWLFVBQUlYLElBQUksQ0FBQ0csSUFBTCxJQUFhUSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9RLE1BQVAsR0FBZ0IsQ0FBakMsRUFBb0M7QUFDbEMsY0FBTWIsS0FBSyxDQUFFLG9DQUFGLENBQVg7QUFDRDs7QUFDRFUsTUFBQUEsSUFBSSxDQUFDSSxLQUFMLEdBQ0VwQixJQUFJLENBQUNJLElBQUwsS0FBYyxTQUFkLElBQTJCSixJQUFJLENBQUNJLElBQUwsS0FBYyxXQUF6QyxHQUNJTyxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9HLEtBQVAsQ0FBYSxDQUFiLENBREosR0FFSUgsR0FBRyxDQUFDLENBQUQsQ0FIVDs7QUFLQSxVQUFJWCxJQUFJLENBQUNHLElBQUwsSUFBYUksT0FBTyxDQUFDUSxjQUFSLENBQXVCQyxJQUFJLENBQUNJLEtBQTVCLENBQWpCLEVBQXFEO0FBQ25ELGNBQU1kLEtBQUssQ0FBRSxTQUFRVSxJQUFJLENBQUNJLEtBQU0sY0FBckIsQ0FBWDtBQUNEOztBQUNEYixNQUFBQSxPQUFPLENBQUNTLElBQUksQ0FBQ0ksS0FBTixDQUFQLEdBQXNCUCxHQUF0QjtBQUNELEtBakN3QixDQW1DekI7OztBQUNBLFFBQUlGLEdBQUcsQ0FBQyxDQUFELENBQVAsRUFBWTtBQUNWSyxNQUFBQSxJQUFJLENBQUNLLFFBQUwsR0FBZ0JWLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT08sSUFBUCxHQUFjSixLQUFkLENBQW9CLENBQXBCLEVBQXVCLENBQUMsQ0FBeEIsQ0FBaEI7QUFDRDs7QUFFRGpCLElBQUFBLEtBQUssQ0FBQ2dCLEdBQUQsQ0FBTCxHQUFhRyxJQUFiO0FBQ0Q7O0FBRUQsU0FBTztBQUFFakIsSUFBQUEsT0FBTyxFQUFFRixLQUFYO0FBQWtCVSxJQUFBQTtBQUFsQixHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhlY2FsbCBmcm9tICdleGVjYWxsJztcbmltcG9ydCBjYW1lbGNhc2UgZnJvbSAnY2FtZWxjYXNlJztcbmltcG9ydCB7IElPZlR5cGUsIElGbGFnIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZsYWdzT3B0cyB7XG4gIC8qKlxuICAgKiBJZiBmYWxzZSwgYGZsYWdzYCB3b24ndCBwZXJmb3JtIHNhZmV0eSBjaGVja3MuIERlZmF1bHQ6IGB0cnVlYC5cbiAgICovXG4gIHNhZmU/OiBib29sZWFuO1xuICAvKipcbiAgICogYCdrZWVwJ2Agd2lsbCBtYWludGFpbiBhbGwgbmFtZXMgYXMgdGhleSBhcmU7IGAnbm8tZGFzaCdgIHdpbGwgcmVtb3ZlIHRoZSBpbml0aWFsIGZsYWcgZGFzaGVzOyBgJ2NhbWVsY2FzZSdgIHdpbGwgcmVtb3ZlIGluaXRpYWwgZGFzaGVzIGFuZCBjYW1lbGNhc2UgZmxhZ3MuIERlZmF1bHQ6IGAna2VlcCdgLlxuICAgKi9cbiAgbW9kZT86ICdrZWVwJyB8ICduby1kYXNoJyB8ICdjYW1lbGNhc2UnO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhIGBoZWxwYCBzdHJpbmcgYW5kIHJldHVybnMgYW4gb2JqZWN0IHdpdGggb3B0aW9ucywgYWxpYXNlcywgYXJ1Z21lbnRzLCBhbmQgZGVzY3JpcHRpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGFncyhcbiAgaGVscDogc3RyaW5nLFxuICBvcHRpb25zPzogSUZsYWdzT3B0c1xuKTogeyBvcHRpb25zOiBJT2ZUeXBlPElGbGFnPjsgYWxpYXNlczogSU9mVHlwZTxzdHJpbmc+IH0ge1xuICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IHNhZmU6IHRydWUsIG1vZGU6ICdrZWVwJyB9LCBvcHRpb25zKTtcblxuICBpZiAob3B0cy5zYWZlKSB7XG4gICAgaWYgKC9cXHMqLS0oW2Etei1dKilcXHMqKDxbYS16LVxcc10qPik/LFxccyotKFthLXotXSopL2kuZXhlYyhoZWxwKSkge1xuICAgICAgdGhyb3cgRXJyb3IoYEFsaWFzIGZvdW5kIGxhc3QgaW4gaGVscCAtc2hvdWxkIGJlIGZpcnN0YCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYWxpYXNlczogSU9mVHlwZTxzdHJpbmc+ID0ge307XG4gIGNvbnN0IGZsYWdzOiBJT2ZUeXBlPElGbGFnPiA9IHt9O1xuXG4gIGNvbnN0IHJlZ2V4ID0gL1tcXG5cXHJdXFxzKig/OigtW2Etei1dKylbIFxcdF0qLFsgXFx0XSopPygtLVthLXotXSspKFxccyo8Lio+KT8oICsuKik/JC9naW07XG4gIGNvbnN0IG1hdGNoZXMgPSBleGVjYWxsKHJlZ2V4LCBoZWxwKTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGNvbnN0IHN1YiA9IG1hdGNoLnN1Yk1hdGNoZXM7XG5cbiAgICBpZiAoIXN1YlsxXSkgY29udGludWU7XG5cbiAgICAvLyBLZXlcbiAgICBjb25zdCBrZXkgPVxuICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICBvcHRzLm1vZGUgPT09ICduby1kYXNoJyA/IHN1YlsxXS5zbGljZSgyKVxuICAgICAgICA6IG9wdHMubW9kZSA9PT0gJ2NhbWVsY2FzZScgPyBjYW1lbGNhc2Uoc3ViWzFdKSA6IHN1YlsxXTtcbiAgICBpZiAob3B0cy5zYWZlICYmIGZsYWdzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHRocm93IEVycm9yKGBGbGFnICR7a2V5fSBmb3VuZCB0d2ljZWApO1xuICAgIH1cblxuICAgIC8vIGRlc2NyaXB0aW9uXG4gICAgY29uc3QgaXRlbTogSUZsYWcgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogc3ViWzNdID8gc3ViWzNdLnRyaW0oKSA6ICcnXG4gICAgfTtcblxuICAgIC8vIGFsaWFzXG4gICAgaWYgKHN1YlswXSkge1xuICAgICAgaWYgKG9wdHMuc2FmZSAmJiBzdWJbMF0ubGVuZ3RoID4gMikge1xuICAgICAgICB0aHJvdyBFcnJvcihgQWxpYXNlcyBtdXN0IGJlIGEgc2luZ2xlIGNoYXJhY3RlcmApO1xuICAgICAgfVxuICAgICAgaXRlbS5hbGlhcyA9XG4gICAgICAgIG9wdHMubW9kZSA9PT0gJ25vLWRhc2gnIHx8IG9wdHMubW9kZSA9PT0gJ2NhbWVsY2FzZSdcbiAgICAgICAgICA/IHN1YlswXS5zbGljZSgxKVxuICAgICAgICAgIDogc3ViWzBdO1xuXG4gICAgICBpZiAob3B0cy5zYWZlICYmIGFsaWFzZXMuaGFzT3duUHJvcGVydHkoaXRlbS5hbGlhcykpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYEFsaWFzICR7aXRlbS5hbGlhc30gZm91bmQgdHdpY2VgKTtcbiAgICAgIH1cbiAgICAgIGFsaWFzZXNbaXRlbS5hbGlhc10gPSBrZXk7XG4gICAgfVxuXG4gICAgLy8gYXJndW1lbnRcbiAgICBpZiAoc3ViWzJdKSB7XG4gICAgICBpdGVtLmFyZ3VtZW50ID0gc3ViWzJdLnRyaW0oKS5zbGljZSgxLCAtMSk7XG4gICAgfVxuXG4gICAgZmxhZ3Nba2V5XSA9IGl0ZW07XG4gIH1cblxuICByZXR1cm4geyBvcHRpb25zOiBmbGFncywgYWxpYXNlcyB9O1xufVxuIl19