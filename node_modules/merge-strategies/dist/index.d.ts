export declare type Merge<D, T> = T & (D extends object ? T & D : T);
/**
 * If both `defaults` and `value` are objects, they will be shallow merged. Mutations to the returned object won't have an effect over `defaults`.
 */
export declare function shallow<D, T = Partial<D>>(defaults: D, value: T): Merge<D, T>;
/**
 * If both `defaults` and `value` are objects, they will be deep merged. Arrays won't be merged. Mutations to the returned object won't have an effect over `defaults`.
 */
export declare function merge<D, T = Partial<D>>(defaults: D, value: T): Merge<D, T>;
/**
 * If both the `defaults` and `value` are objects, they will be deep merged. Arrays will be concatenated. Mutations to the returned object won't have an effect over `defaults`.
 */
export declare function deep<D, T = Partial<D>>(defaults: D, value: T): Merge<D, T>;
