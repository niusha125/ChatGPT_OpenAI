"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = main;

var _path = _interopRequireDefault(require("path"));

var _cliBelt = require("cli-belt");

var _commonTags = require("common-tags");

var _arg = _interopRequireDefault(require("arg"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _read = _interopRequireDefault(require("../read"));

var _write = _interopRequireDefault(require("../write"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
async function main(argv) {
  const pkg = await (0, _cliBelt.loadPackage)(__dirname, {
    title: true
  });
  const help = _commonTags.stripIndent`
    ${pkg.description ? pkg.description : ''}

    Usage:
      $ yimp [options]

    Options:
      -i, --input <path>        Path to input file
      -o, --output <path>       Path to output file, optional
      -e, --ext <extensions>    Extensions, comma separated, optional
      -h, --help                Show help
      -v, --version             Show version number

    Example:
      $ yimp -i input-file.yml -o output-file.yml -e yml,yaml,raml
  `;
  const types = {
    '--input': String,
    '--output': String,
    '--ext': String,
    '--help': Boolean,
    '--version': Boolean
  };
  const {
    options: base,
    aliases
  } = (0, _cliBelt.flags)(help);
  (0, _cliBelt.safePairs)(types, base, {
    fail: true,
    bidirectional: true
  });
  Object.assign(types, aliases);
  const cmd = (0, _arg.default)(types, {
    argv,
    permissive: false,
    stopAtPositional: true
  });
  if (cmd['--help']) return console.log(help);
  if (cmd['--version']) return console.log(pkg.version);

  if (cmd._.length) {
    console.log(help + '\n');
    throw Error(`Unexpected command: ${cmd._[0]}`);
  }

  if (!cmd['--input']) {
    console.log(help + '\n');
    throw Error(`Input file path is required`);
  }

  const input = _path.default.isAbsolute(cmd['--input']) ? cmd['--input'] : _path.default.join(process.cwd(), cmd['--input']);
  const output = cmd['--output'] ? _path.default.isAbsolute(cmd['--output']) ? cmd['--output'] : _path.default.join(process.cwd(), cmd['--output']) : undefined;
  const options = cmd['--ext'] ? {
    ext: cmd['--ext'].split(',').map(ext => ext[0] === '.' ? ext : `.${ext}`)
  } : {};

  if (!output) {
    console.log(_jsYaml.default.dump((0, _read.default)(input, options)).trim());
  } else {
    (0, _write.default)(input, output, options);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vbWFpbi50cyJdLCJuYW1lcyI6WyJtYWluIiwiYXJndiIsInBrZyIsIl9fZGlybmFtZSIsInRpdGxlIiwiaGVscCIsImluZGVudCIsImRlc2NyaXB0aW9uIiwidHlwZXMiLCJTdHJpbmciLCJCb29sZWFuIiwib3B0aW9ucyIsImJhc2UiLCJhbGlhc2VzIiwiZmFpbCIsImJpZGlyZWN0aW9uYWwiLCJPYmplY3QiLCJhc3NpZ24iLCJjbWQiLCJwZXJtaXNzaXZlIiwic3RvcEF0UG9zaXRpb25hbCIsImNvbnNvbGUiLCJsb2ciLCJ2ZXJzaW9uIiwiXyIsImxlbmd0aCIsIkVycm9yIiwiaW5wdXQiLCJwYXRoIiwiaXNBYnNvbHV0ZSIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwib3V0cHV0IiwidW5kZWZpbmVkIiwiZXh0Iiwic3BsaXQiLCJtYXAiLCJ5YW1sIiwiZHVtcCIsInRyaW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQVBBO0FBU2UsZUFBZUEsSUFBZixDQUFvQkMsSUFBcEIsRUFBbUQ7QUFDaEUsUUFBTUMsR0FBRyxHQUFHLE1BQU0sMEJBQVlDLFNBQVosRUFBdUI7QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBdkIsQ0FBbEI7QUFFQSxRQUFNQyxJQUFJLEdBQUdDLHVCQUFPO01BQ2hCSixHQUFHLENBQUNLLFdBQUosR0FBa0JMLEdBQUcsQ0FBQ0ssV0FBdEIsR0FBb0MsRUFBRzs7Ozs7Ozs7Ozs7Ozs7R0FEM0M7QUFpQkEsUUFBTUMsS0FBSyxHQUFHO0FBQ1osZUFBV0MsTUFEQztBQUVaLGdCQUFZQSxNQUZBO0FBR1osYUFBU0EsTUFIRztBQUlaLGNBQVVDLE9BSkU7QUFLWixpQkFBYUE7QUFMRCxHQUFkO0FBUUEsUUFBTTtBQUFFQyxJQUFBQSxPQUFPLEVBQUVDLElBQVg7QUFBaUJDLElBQUFBO0FBQWpCLE1BQTZCLG9CQUFNUixJQUFOLENBQW5DO0FBQ0EsMEJBQVVHLEtBQVYsRUFBaUJJLElBQWpCLEVBQXVCO0FBQUVFLElBQUFBLElBQUksRUFBRSxJQUFSO0FBQWNDLElBQUFBLGFBQWEsRUFBRTtBQUE3QixHQUF2QjtBQUNBQyxFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY1QsS0FBZCxFQUFxQkssT0FBckI7QUFDQSxRQUFNSyxHQUFHLEdBQUcsa0JBQUlWLEtBQUosRUFBVztBQUFFUCxJQUFBQSxJQUFGO0FBQVFrQixJQUFBQSxVQUFVLEVBQUUsS0FBcEI7QUFBMkJDLElBQUFBLGdCQUFnQixFQUFFO0FBQTdDLEdBQVgsQ0FBWjtBQUVBLE1BQUlGLEdBQUcsQ0FBQyxRQUFELENBQVAsRUFBbUIsT0FBT0csT0FBTyxDQUFDQyxHQUFSLENBQVlqQixJQUFaLENBQVA7QUFDbkIsTUFBSWEsR0FBRyxDQUFDLFdBQUQsQ0FBUCxFQUFzQixPQUFPRyxPQUFPLENBQUNDLEdBQVIsQ0FBWXBCLEdBQUcsQ0FBQ3FCLE9BQWhCLENBQVA7O0FBQ3RCLE1BQUlMLEdBQUcsQ0FBQ00sQ0FBSixDQUFNQyxNQUFWLEVBQWtCO0FBQ2hCSixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWpCLElBQUksR0FBRyxJQUFuQjtBQUNBLFVBQU1xQixLQUFLLENBQUUsdUJBQXNCUixHQUFHLENBQUNNLENBQUosQ0FBTSxDQUFOLENBQVMsRUFBakMsQ0FBWDtBQUNEOztBQUNELE1BQUksQ0FBQ04sR0FBRyxDQUFDLFNBQUQsQ0FBUixFQUFxQjtBQUNuQkcsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlqQixJQUFJLEdBQUcsSUFBbkI7QUFDQSxVQUFNcUIsS0FBSyxDQUFFLDZCQUFGLENBQVg7QUFDRDs7QUFFRCxRQUFNQyxLQUFLLEdBQUdDLGNBQUtDLFVBQUwsQ0FBZ0JYLEdBQUcsQ0FBQyxTQUFELENBQW5CLElBQ1ZBLEdBQUcsQ0FBQyxTQUFELENBRE8sR0FFVlUsY0FBS0UsSUFBTCxDQUFVQyxPQUFPLENBQUNDLEdBQVIsRUFBVixFQUF5QmQsR0FBRyxDQUFDLFNBQUQsQ0FBNUIsQ0FGSjtBQUdBLFFBQU1lLE1BQU0sR0FBR2YsR0FBRyxDQUFDLFVBQUQsQ0FBSCxHQUNYVSxjQUFLQyxVQUFMLENBQWdCWCxHQUFHLENBQUMsVUFBRCxDQUFuQixJQUNFQSxHQUFHLENBQUMsVUFBRCxDQURMLEdBRUVVLGNBQUtFLElBQUwsQ0FBVUMsT0FBTyxDQUFDQyxHQUFSLEVBQVYsRUFBeUJkLEdBQUcsQ0FBQyxVQUFELENBQTVCLENBSFMsR0FJWGdCLFNBSko7QUFLQSxRQUFNdkIsT0FBTyxHQUFHTyxHQUFHLENBQUMsT0FBRCxDQUFILEdBQ1o7QUFDRWlCLElBQUFBLEdBQUcsRUFBRWpCLEdBQUcsQ0FBQyxPQUFELENBQUgsQ0FDRmtCLEtBREUsQ0FDSSxHQURKLEVBRUZDLEdBRkUsQ0FFR0YsR0FBRCxJQUFVQSxHQUFHLENBQUMsQ0FBRCxDQUFILEtBQVcsR0FBWCxHQUFpQkEsR0FBakIsR0FBd0IsSUFBR0EsR0FBSSxFQUYzQztBQURQLEdBRFksR0FNWixFQU5KOztBQVFBLE1BQUksQ0FBQ0YsTUFBTCxFQUFhO0FBQ1haLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZZ0IsZ0JBQUtDLElBQUwsQ0FBVSxtQkFBS1osS0FBTCxFQUFZaEIsT0FBWixDQUFWLEVBQWdDNkIsSUFBaEMsRUFBWjtBQUNELEdBRkQsTUFFTztBQUNMLHdCQUFNYixLQUFOLEVBQWFNLE1BQWIsRUFBcUJ0QixPQUFyQjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGxvYWRQYWNrYWdlLCBmbGFncywgc2FmZVBhaXJzIH0gZnJvbSAnY2xpLWJlbHQnO1xuaW1wb3J0IHsgc3RyaXBJbmRlbnQgYXMgaW5kZW50IH0gZnJvbSAnY29tbW9uLXRhZ3MnO1xuaW1wb3J0IGFyZyBmcm9tICdhcmcnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgcmVhZCBmcm9tICd+L3JlYWQnO1xuaW1wb3J0IHdyaXRlIGZyb20gJ34vd3JpdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBtYWluKGFyZ3Y6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHBrZyA9IGF3YWl0IGxvYWRQYWNrYWdlKF9fZGlybmFtZSwgeyB0aXRsZTogdHJ1ZSB9KTtcblxuICBjb25zdCBoZWxwID0gaW5kZW50YFxuICAgICR7cGtnLmRlc2NyaXB0aW9uID8gcGtnLmRlc2NyaXB0aW9uIDogJyd9XG5cbiAgICBVc2FnZTpcbiAgICAgICQgeWltcCBbb3B0aW9uc11cblxuICAgIE9wdGlvbnM6XG4gICAgICAtaSwgLS1pbnB1dCA8cGF0aD4gICAgICAgIFBhdGggdG8gaW5wdXQgZmlsZVxuICAgICAgLW8sIC0tb3V0cHV0IDxwYXRoPiAgICAgICBQYXRoIHRvIG91dHB1dCBmaWxlLCBvcHRpb25hbFxuICAgICAgLWUsIC0tZXh0IDxleHRlbnNpb25zPiAgICBFeHRlbnNpb25zLCBjb21tYSBzZXBhcmF0ZWQsIG9wdGlvbmFsXG4gICAgICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgIFNob3cgaGVscFxuICAgICAgLXYsIC0tdmVyc2lvbiAgICAgICAgICAgICBTaG93IHZlcnNpb24gbnVtYmVyXG5cbiAgICBFeGFtcGxlOlxuICAgICAgJCB5aW1wIC1pIGlucHV0LWZpbGUueW1sIC1vIG91dHB1dC1maWxlLnltbCAtZSB5bWwseWFtbCxyYW1sXG4gIGA7XG5cbiAgY29uc3QgdHlwZXMgPSB7XG4gICAgJy0taW5wdXQnOiBTdHJpbmcsXG4gICAgJy0tb3V0cHV0JzogU3RyaW5nLFxuICAgICctLWV4dCc6IFN0cmluZyxcbiAgICAnLS1oZWxwJzogQm9vbGVhbixcbiAgICAnLS12ZXJzaW9uJzogQm9vbGVhblxuICB9O1xuXG4gIGNvbnN0IHsgb3B0aW9uczogYmFzZSwgYWxpYXNlcyB9ID0gZmxhZ3MoaGVscCk7XG4gIHNhZmVQYWlycyh0eXBlcywgYmFzZSwgeyBmYWlsOiB0cnVlLCBiaWRpcmVjdGlvbmFsOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKHR5cGVzLCBhbGlhc2VzKTtcbiAgY29uc3QgY21kID0gYXJnKHR5cGVzLCB7IGFyZ3YsIHBlcm1pc3NpdmU6IGZhbHNlLCBzdG9wQXRQb3NpdGlvbmFsOiB0cnVlIH0pO1xuXG4gIGlmIChjbWRbJy0taGVscCddKSByZXR1cm4gY29uc29sZS5sb2coaGVscCk7XG4gIGlmIChjbWRbJy0tdmVyc2lvbiddKSByZXR1cm4gY29uc29sZS5sb2cocGtnLnZlcnNpb24pO1xuICBpZiAoY21kLl8ubGVuZ3RoKSB7XG4gICAgY29uc29sZS5sb2coaGVscCArICdcXG4nKTtcbiAgICB0aHJvdyBFcnJvcihgVW5leHBlY3RlZCBjb21tYW5kOiAke2NtZC5fWzBdfWApO1xuICB9XG4gIGlmICghY21kWyctLWlucHV0J10pIHtcbiAgICBjb25zb2xlLmxvZyhoZWxwICsgJ1xcbicpO1xuICAgIHRocm93IEVycm9yKGBJbnB1dCBmaWxlIHBhdGggaXMgcmVxdWlyZWRgKTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0ID0gcGF0aC5pc0Fic29sdXRlKGNtZFsnLS1pbnB1dCddKVxuICAgID8gY21kWyctLWlucHV0J11cbiAgICA6IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBjbWRbJy0taW5wdXQnXSk7XG4gIGNvbnN0IG91dHB1dCA9IGNtZFsnLS1vdXRwdXQnXVxuICAgID8gcGF0aC5pc0Fic29sdXRlKGNtZFsnLS1vdXRwdXQnXSlcbiAgICAgID8gY21kWyctLW91dHB1dCddXG4gICAgICA6IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBjbWRbJy0tb3V0cHV0J10pXG4gICAgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IG9wdGlvbnMgPSBjbWRbJy0tZXh0J11cbiAgICA/IHtcbiAgICAgICAgZXh0OiBjbWRbJy0tZXh0J11cbiAgICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAgIC5tYXAoKGV4dCkgPT4gKGV4dFswXSA9PT0gJy4nID8gZXh0IDogYC4ke2V4dH1gKSlcbiAgICAgIH1cbiAgICA6IHt9O1xuXG4gIGlmICghb3V0cHV0KSB7XG4gICAgY29uc29sZS5sb2coeWFtbC5kdW1wKHJlYWQoaW5wdXQsIG9wdGlvbnMpKS50cmltKCkpO1xuICB9IGVsc2Uge1xuICAgIHdyaXRlKGlucHV0LCBvdXRwdXQsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=