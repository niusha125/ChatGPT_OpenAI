export declare function map<T>(arr: Array<Promise<T> | T>, fn: (value: T, index: number, arr: T[]) => Promise<any> | any): Promise<any[]>;
export declare function filter<T>(arr: Array<Promise<T> | T>, fn: (value: T, index: number, arr: T[]) => Promise<any> | any): Promise<any[]>;
export declare function reduce<T>(arr: Array<Promise<T> | T>, fn: (accumulator: Promise<any>, value: T, index: number, arr: T[]) => Promise<any> | any, initialValue?: Promise<any> | any): Promise<any>;
export declare function each<T>(arr: Array<Promise<T> | T>, fn: (value: T, index: number, arr: T[]) => any): Promise<void>;
declare const _default: {
    map: typeof map;
    filter: typeof filter;
    reduce: typeof reduce;
    each: typeof each;
};
export default _default;
