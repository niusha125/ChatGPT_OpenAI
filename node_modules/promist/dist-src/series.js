export function map(arr, fn) {
  const ans = [];
  return arr.reduce((acc, x, i) => {
    return acc.then(() => x).then(val => fn(val, i, arr)).then(res => ans.push(res));
  }, Promise.resolve()).then(() => ans);
}
export function filter(arr, fn) {
  const ans = [];
  return arr.reduce((acc, x, i) => {
    return acc.then(() => x).then(val => Promise.resolve(fn(val, i, arr)).then(res => res && ans.push(val)));
  }, Promise.resolve()).then(() => ans);
}
export function reduce(arr, fn, initialValue) {
  return arr.slice(1).reduce((acc, x, i) => acc.then(val => Promise.resolve(x).then(x => fn(val, x, i + 1, arr))), initialValue === undefined ? Promise.resolve(arr[0]) : Promise.resolve(initialValue).then(val => Promise.resolve(arr[0]).then(x => fn(val, x, 0, arr))));
}
export function each(arr, fn) {
  return arr.reduce((acc, x, i) => {
    return acc.then(() => x).then(val => fn(val, i, arr));
  }, Promise.resolve()).then(() => {});
}
export default {
  map,
  filter,
  reduce,
  each
};