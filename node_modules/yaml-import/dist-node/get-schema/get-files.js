"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getFiles;
exports.getFromDir = getFromDir;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _fsReaddirRecursive = _interopRequireDefault(require("fs-readdir-recursive"));

var _absolute = _interopRequireDefault(require("./absolute"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getFiles(paths, cwd, options, recursive) {
  return paths.reduce((acc, file) => {
    file = (0, _absolute.default)({
      file,
      cwd
    });

    const stat = _fs.default.statSync(file);

    return stat.isDirectory() ? acc.concat(getFromDir(file, options, recursive).map(item => ({
      cwd: file,
      directory: _path.default.dirname(item),
      name: _path.default.basename(item)
    }))) : acc.concat({
      cwd,
      directory: '.',
      name: _path.default.relative(cwd, file)
    });
  }, []);
}

function getFromDir(absolute, options, recursive) {
  const paths = recursive ? (0, _fsReaddirRecursive.default)(absolute) : _fs.default.readdirSync(absolute).filter(item => {
    return !_fs.default.statSync(_path.default.join(absolute, item)).isDirectory();
  });
  return paths.filter(file => {
    const parsed = _path.default.parse(file);

    return parsed.name[0] !== '.' && (!options.ext || options.ext.indexOf(parsed.ext) !== -1);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZXQtc2NoZW1hL2dldC1maWxlcy50cyJdLCJuYW1lcyI6WyJnZXRGaWxlcyIsInBhdGhzIiwiY3dkIiwib3B0aW9ucyIsInJlY3Vyc2l2ZSIsInJlZHVjZSIsImFjYyIsImZpbGUiLCJzdGF0IiwiZnMiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwiY29uY2F0IiwiZ2V0RnJvbURpciIsIm1hcCIsIml0ZW0iLCJkaXJlY3RvcnkiLCJwYXRoIiwiZGlybmFtZSIsIm5hbWUiLCJiYXNlbmFtZSIsInJlbGF0aXZlIiwiYWJzb2x1dGUiLCJyZWFkZGlyU3luYyIsImZpbHRlciIsImpvaW4iLCJwYXJzZWQiLCJwYXJzZSIsImV4dCIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFFZSxTQUFTQSxRQUFULENBQ2JDLEtBRGEsRUFFYkMsR0FGYSxFQUdiQyxPQUhhLEVBSWJDLFNBSmEsRUFLTTtBQUNuQixTQUFPSCxLQUFLLENBQUNJLE1BQU4sQ0FBYSxDQUFDQyxHQUFELEVBQXlCQyxJQUF6QixLQUEwQztBQUM1REEsSUFBQUEsSUFBSSxHQUFHLHVCQUFTO0FBQUVBLE1BQUFBLElBQUY7QUFBUUwsTUFBQUE7QUFBUixLQUFULENBQVA7O0FBQ0EsVUFBTU0sSUFBSSxHQUFHQyxZQUFHQyxRQUFILENBQVlILElBQVosQ0FBYjs7QUFDQSxXQUFPQyxJQUFJLENBQUNHLFdBQUwsS0FDSEwsR0FBRyxDQUFDTSxNQUFKLENBQ0VDLFVBQVUsQ0FBQ04sSUFBRCxFQUFPSixPQUFQLEVBQWdCQyxTQUFoQixDQUFWLENBQXFDVSxHQUFyQyxDQUEwQ0MsSUFBRCxLQUFXO0FBQ2xEYixNQUFBQSxHQUFHLEVBQUVLLElBRDZDO0FBRWxEUyxNQUFBQSxTQUFTLEVBQUVDLGNBQUtDLE9BQUwsQ0FBYUgsSUFBYixDQUZ1QztBQUdsREksTUFBQUEsSUFBSSxFQUFFRixjQUFLRyxRQUFMLENBQWNMLElBQWQ7QUFINEMsS0FBWCxDQUF6QyxDQURGLENBREcsR0FRSFQsR0FBRyxDQUFDTSxNQUFKLENBQVc7QUFDVFYsTUFBQUEsR0FEUztBQUVUYyxNQUFBQSxTQUFTLEVBQUUsR0FGRjtBQUdURyxNQUFBQSxJQUFJLEVBQUVGLGNBQUtJLFFBQUwsQ0FBY25CLEdBQWQsRUFBbUJLLElBQW5CO0FBSEcsS0FBWCxDQVJKO0FBYUQsR0FoQk0sRUFnQkosRUFoQkksQ0FBUDtBQWlCRDs7QUFFTSxTQUFTTSxVQUFULENBQ0xTLFFBREssRUFFTG5CLE9BRkssRUFHTEMsU0FISyxFQUlLO0FBQ1YsUUFBTUgsS0FBSyxHQUFHRyxTQUFTLEdBQ25CLGlDQUFha0IsUUFBYixDQURtQixHQUVuQmIsWUFBR2MsV0FBSCxDQUFlRCxRQUFmLEVBQXlCRSxNQUF6QixDQUFpQ1QsSUFBRCxJQUFVO0FBQ3hDLFdBQU8sQ0FBQ04sWUFBR0MsUUFBSCxDQUFZTyxjQUFLUSxJQUFMLENBQVVILFFBQVYsRUFBb0JQLElBQXBCLENBQVosRUFBdUNKLFdBQXZDLEVBQVI7QUFDRCxHQUZELENBRko7QUFNQSxTQUFPVixLQUFLLENBQUN1QixNQUFOLENBQWNqQixJQUFELElBQVU7QUFDNUIsVUFBTW1CLE1BQU0sR0FBR1QsY0FBS1UsS0FBTCxDQUFXcEIsSUFBWCxDQUFmOztBQUNBLFdBQ0VtQixNQUFNLENBQUNQLElBQVAsQ0FBWSxDQUFaLE1BQW1CLEdBQW5CLEtBQ0MsQ0FBQ2hCLE9BQU8sQ0FBQ3lCLEdBQVQsSUFBZ0J6QixPQUFPLENBQUN5QixHQUFSLENBQVlDLE9BQVosQ0FBb0JILE1BQU0sQ0FBQ0UsR0FBM0IsTUFBb0MsQ0FBQyxDQUR0RCxDQURGO0FBSUQsR0FOTSxDQUFQO0FBT0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcmVjdXJzaXZlZGlyIGZyb20gJ2ZzLXJlYWRkaXItcmVjdXJzaXZlJztcbmltcG9ydCB7IElPcHRpb25zLCBJRmlsZURlZmluaXRpb24gfSBmcm9tICd+L3R5cGVzJztcbmltcG9ydCBhYnNvbHV0ZSBmcm9tICcuL2Fic29sdXRlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RmlsZXMoXG4gIHBhdGhzOiBzdHJpbmdbXSxcbiAgY3dkOiBzdHJpbmcsXG4gIG9wdGlvbnM6IElPcHRpb25zLFxuICByZWN1cnNpdmU/OiBib29sZWFuXG4pOiBJRmlsZURlZmluaXRpb25bXSB7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoKGFjYzogSUZpbGVEZWZpbml0aW9uW10sIGZpbGU6IHN0cmluZykgPT4ge1xuICAgIGZpbGUgPSBhYnNvbHV0ZSh7IGZpbGUsIGN3ZCB9KTtcbiAgICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoZmlsZSk7XG4gICAgcmV0dXJuIHN0YXQuaXNEaXJlY3RvcnkoKVxuICAgICAgPyBhY2MuY29uY2F0KFxuICAgICAgICAgIGdldEZyb21EaXIoZmlsZSwgb3B0aW9ucywgcmVjdXJzaXZlKS5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICAgICAgICBjd2Q6IGZpbGUsXG4gICAgICAgICAgICBkaXJlY3Rvcnk6IHBhdGguZGlybmFtZShpdGVtKSxcbiAgICAgICAgICAgIG5hbWU6IHBhdGguYmFzZW5hbWUoaXRlbSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgKVxuICAgICAgOiBhY2MuY29uY2F0KHtcbiAgICAgICAgICBjd2QsXG4gICAgICAgICAgZGlyZWN0b3J5OiAnLicsXG4gICAgICAgICAgbmFtZTogcGF0aC5yZWxhdGl2ZShjd2QsIGZpbGUpXG4gICAgICAgIH0pO1xuICB9LCBbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcm9tRGlyKFxuICBhYnNvbHV0ZTogc3RyaW5nLFxuICBvcHRpb25zOiBJT3B0aW9ucyxcbiAgcmVjdXJzaXZlPzogYm9vbGVhblxuKTogc3RyaW5nW10ge1xuICBjb25zdCBwYXRocyA9IHJlY3Vyc2l2ZVxuICAgID8gcmVjdXJzaXZlZGlyKGFic29sdXRlKVxuICAgIDogZnMucmVhZGRpclN5bmMoYWJzb2x1dGUpLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICByZXR1cm4gIWZzLnN0YXRTeW5jKHBhdGguam9pbihhYnNvbHV0ZSwgaXRlbSkpLmlzRGlyZWN0b3J5KCk7XG4gICAgICB9KTtcblxuICByZXR1cm4gcGF0aHMuZmlsdGVyKChmaWxlKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkID0gcGF0aC5wYXJzZShmaWxlKTtcbiAgICByZXR1cm4gKFxuICAgICAgcGFyc2VkLm5hbWVbMF0gIT09ICcuJyAmJlxuICAgICAgKCFvcHRpb25zLmV4dCB8fCBvcHRpb25zLmV4dC5pbmRleE9mKHBhcnNlZC5leHQpICE9PSAtMSlcbiAgICApO1xuICB9KTtcbn1cbiJdfQ==