import cancellable from "./cancellable.js";
import deferrable from "./deferrable.js";
import { asNew, intercept } from "../helpers/index.js"; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type

export default function timeout(ms, reason) {
  function trunk(promise, create) {
    const shouldCancel = reason === undefined || reason === false;
    const p = cancellable(deferrable(asNew(promise, create)));
    let done = false;
    let timeout;
    new Promise(resolve => timeout = setTimeout(resolve, ms)).then(() => {
      if (done) return;
      if (shouldCancel) return p.cancel();
      if (typeof reason !== 'boolean') return p.reject(reason);
      p.reject(Error('Promise timed out'));
    });
    return intercept(p, px => {
      return px.then(val => {
        done = true;
        clearTimeout(timeout);
        return val;
      }).catch(err => {
        done = true;
        clearTimeout(timeout);
        return Promise.reject(err);
      });
    });
  }

  return trunk;
}